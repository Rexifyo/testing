syntax = "proto3";
package cosmos.protocolpool.v1;

option go_package = "cosmossdk.io/x/protocolpool/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

// Msg defines the pool Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // FundCommunityPool defines a method to allow an account to directly
  // fund the community pool.
  rpc FundCommunityPool(MsgFundCommunityPool) returns (MsgFundCommunityPoolResponse);

  // CommunityPoolSpend defines a governance operation for sending tokens from
  // the community pool in the x/protocolpool module to another account, which
  // could be the governance module itself. The authority is defined in the
  // keeper.
  rpc CommunityPoolSpend(MsgCommunityPoolSpend) returns (MsgCommunityPoolSpendResponse);

  // SubmitMsgBudgetProposal defines a method to set a budget proposal.
  rpc SubmitMsgBudgetProposal(MsgBudgetProposal) returns (MsgBudgetProposalResponse);

  // ClaimBudget defines a method to claim the distributed budget.
  rpc ClaimBudget(MsgClaimBudget) returns (MsgClaimBudgetResponse);
}

// MsgFundCommunityPool allows an account to directly
// fund the community pool.
message MsgFundCommunityPool {
  option (cosmos.msg.v1.signer)      = "depositor";
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  string depositor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
message MsgFundCommunityPoolResponse {}

// MsgCommunityPoolSpend defines a message for sending tokens from the community
// pool to another account. This message is typically executed via a governance
// proposal with the governance module being the executing authority.
message MsgCommunityPoolSpend {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string   authority                       = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   recipient                       = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgCommunityPoolSpendResponse defines the response to executing a
// MsgCommunityPoolSpend message.
message MsgCommunityPoolSpendResponse {}

// Budget defines budget proposal type.
message MsgBudgetProposal {
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string                   authority          = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string                   recipient_address  = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin total_budget       = 3;
  int64                    start_time         = 4;
  int64                    remaining_tranches = 5;
  int64                    period             = 6;
}

// MsgBudgetProposalResponse defines the response to executing a
// MsgBudgetProposal message.
message MsgBudgetProposalResponse {}

// MsgClaimBudget defines a message for claiming the distributed budget.
message MsgClaimBudget {
  option (cosmos.msg.v1.signer) = "recipient_address";
  string recipient_address      = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgClaimBudgetResponse defines the response to executing a
// MsgClaimBudget message.
message MsgClaimBudgetResponse {
  cosmos.base.v1beta1.Coin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  ;
}
